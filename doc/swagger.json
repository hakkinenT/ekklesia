{
  "swagger": "2.0",
  "host": "localhost:3333",
  "basePath": "/",
  "info": {
    "version": "1.0.0",
    "title": "Ekklesia API",
    "description": "Software gerenciador de Igrejas"
  },
  "tags": [
    {
      "name": "Login",
      "description": "All about the Login module"
    },
    {
      "name": "Church",
      "description": "All about the Church module"
    },
    {
      "name": "Member",
      "description": "All about the Member module"
    },
    {
      "name": "User",
      "description": "All about the User module"
    },
    {
      "name": "Search Filters",
      "description": "All about all search filters"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/login": {
      "post": {
        "tags": ["Login"],
        "summary": "Log in",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "login",
            "description": "You need the following fields in JSON to log in",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Member or church email",
                  "example": "ibabrasil@hotmail.com"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "minLength": 8,
                  "maxLength": 16,
                  "description": "The member or church password. ",
                  "example": "iB@B2020"
                }
              },
              "required": ["email", "password"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. An object containing user information and the generated token will be returned.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/User"
                },
                "token": {
                  "type": "string",
                  "description": "Token generate after successfully login",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. It can happen if the password is invalid",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Password is invalid"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the user doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "delete": {
        "tags": ["Login"],
        "summary": "Logout",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "description": "It is only necessary to pass the token in the header authorization to log out of the application",
        "responses": {
          "200": {
            "description": "Success. Successfully logged out.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully logged out"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/church": {
      "post": {
        "tags": ["Church"],
        "summary": "Register a church",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "json",
            "description": "You need the following fields in JSON to register a church",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the church",
                  "example": "Igreja Batista do Brasil"
                },
                "cnpj": {
                  "type": "string",
                  "description": "The CNPJ of the church",
                  "example": "14089839000152"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "The email of the church",
                  "example": "ibabrasil@hotmail.com"
                },
                "creation_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The date of creation of the church",
                  "example": "1986-08-11"
                },
                "street": {
                  "type": "string",
                  "description": "The place where the church is located. Example: street, square, avenue...",
                  "example": "Rua Guarani"
                },
                "number": {
                  "type": "string",
                  "example": "1100"
                },
                "neighborhood": {
                  "type": "string",
                  "description": "The area where the church is located",
                  "example": "Centro"
                },
                "zip_code": {
                  "type": "string",
                  "description": "The zip code of the area where the church is located.",
                  "example": "49130000"
                },
                "complement": {
                  "type": "string",
                  "description": "Information that complements the church's location",
                  "example": "Ao lado da prefeitura"
                },
                "city": {
                  "type": "string",
                  "description": "The city where the church is located",
                  "example": "Riachuelo"
                },
                "state": {
                  "type": "string",
                  "description": "The state where the church is located",
                  "example": "Sergipe"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "minLength": 8,
                  "maxLength": 16,
                  "description": "The password of the church. ",
                  "example": "iB@B2020"
                }
              },
              "required": [
                "name",
                "cnpj",
                "email",
                "creation_date",
                "street",
                "number",
                "neighborhood",
                "zip_code",
                "city",
                "state",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Church created successfully. A JSON object containing church information will be returned.",
            "schema": {
              "$ref": "#/definitions/Church"
            }
          },
          "400": {
            "description": "Bad Request. It can happen if the CNPJ is invalid or if the church is already registered or if any other invalid request happens.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church is already registered"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/church/{cnpj}": {
      "get": {
        "tags": ["Church"],
        "summary": "Search a church by CNPJ",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "cnpj",
            "description": "The CNPJ of the church to be searched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing church information including its address will be returned.",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The church id",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "The name of the church",
                  "example": "Igreja Batista do Brasil"
                },
                "cnpj": {
                  "type": "string",
                  "description": "The CNPJ of the church",
                  "example": "35878844000114"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "The email of the church",
                  "example": "ibabrasil@hotmail.com"
                },
                "creation_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The date of creation of the church",
                  "example": "1986-08-11"
                },
                "address_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The address id",
                  "example": 1
                },
                "user_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The user id",
                  "example": 1
                },
                "createdAt": {
                  "type": "string",
                  "format": "date",
                  "description": "The registration date of the church",
                  "example": "2020-08-11"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date",
                  "description": "The update date of the church",
                  "example": "2020-08-11"
                },
                "Address": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if the CNPJ is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The church was not found",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The church was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "put": {
        "tags": ["Church"],
        "summary": "Updates a church and its address",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "cnpj",
            "description": "The CNPJ of the church to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "json",
            "description": "You need the following JSON format to update a church",
            "required": false,
            "schema": {
              "properties": {
                "church": {
                  "$ref": "#/definitions/Church"
                },
                "address": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing updated church information will be returned",
            "schema": {
              "$ref": "#/definitions/Church"
            }
          },
          "400": {
            "description": "Bad Request. It can happen if the CNPJ is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The church was not found",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The church was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "delete": {
        "tags": ["Church"],
        "summary": "Delete a church and its address",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "cnpj",
            "description": "The CNPJ of the church to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. The church was successfully deleted",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The church was successfully deleted!"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if the CNPJ is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church wasn't found",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The church was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/member": {
      "post": {
        "tags": ["Member"],
        "summary": "Register a member",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "json",
            "description": "You need the following fields in JSON to register a member",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The member's name",
                  "example": "José Luis da Silva"
                },
                "cpf": {
                  "type": "string",
                  "description": "The member's CPF",
                  "example": "88811290007"
                },
                "genre": {
                  "type": "string",
                  "description": "The gender of the member",
                  "enum": ["Masculino", "Feminino"],
                  "example": "Masculino"
                },
                "age": {
                  "type": "integer",
                  "description": "The age of the member",
                  "example": "27"
                },
                "date_of_birth": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's birth date",
                  "example": "1986-08-11"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Member email",
                  "example": "jose_silva@hotmail.com"
                },
                "whatsapp": {
                  "type": "string",
                  "description": "The member's whatsapp",
                  "example": "79999999999"
                },
                "profession": {
                  "type": "string",
                  "description": "The member's profession",
                  "example": "Médico"
                },
                "conversion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's conversion date",
                  "example": "1998-09-21"
                },
                "baptism_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's baptism date",
                  "example": "1999-12-11"
                },
                "street": {
                  "type": "string",
                  "description": "The place where the member lives. Example: street, square, avenue...",
                  "example": "Rua Tárcio Garcez"
                },
                "number": {
                  "type": "string",
                  "example": "1209"
                },
                "neighborhood": {
                  "type": "string",
                  "description": "The area where the member lives",
                  "example": "Centro"
                },
                "zip_code": {
                  "type": "string",
                  "description": "The zip code of the area where the member lives",
                  "example": "49130000"
                },
                "complement": {
                  "type": "string",
                  "description": "Information that complements the member's address",
                  "example": "Ao lado da igreja católica"
                },
                "city": {
                  "type": "string",
                  "description": "The city where the member lives",
                  "example": "Riachuelo"
                },
                "state": {
                  "type": "string",
                  "description": "The state where the member lives",
                  "example": "Sergipe"
                }
              },
              "required": [
                "name",
                "cpf",
                "genre",
                "age",
                "date_of_birth",
                "email",
                "profession",
                "street",
                "number",
                "neighborhood",
                "zip_code",
                "city",
                "state"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Member created successfully. A JSON object containing member information will be returned.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          },
          "400": {
            "description": "Bad Request. It can happen if any field is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members": {
      "get": {
        "tags": ["Member"],
        "summary": "Search for all members",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON containing an array of all members will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The member id",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "description": "The member's name",
                    "example": "José Luis da Silva"
                  },
                  "cpf": {
                    "type": "string",
                    "description": "The member's CPF",
                    "example": "88811290007"
                  },
                  "genre": {
                    "type": "string",
                    "description": "The gender of the member",
                    "enum": ["Masculino", "Feminino"],
                    "example": "Masculino"
                  },
                  "age": {
                    "type": "integer",
                    "description": "The age of the member",
                    "example": "27"
                  },
                  "date_of_birth": {
                    "type": "string",
                    "format": "date",
                    "description": "The member's birth date",
                    "example": "1986-08-11"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Member email",
                    "example": "jose_silva@hotmail.com"
                  },
                  "whatsapp": {
                    "type": "string",
                    "description": "The member's whatsapp",
                    "example": "79999999999"
                  },
                  "profession": {
                    "type": "string",
                    "description": "The member's profession",
                    "example": "Médico"
                  },
                  "conversion_date": {
                    "type": "string",
                    "format": "date",
                    "description": "The member's conversion date",
                    "example": "1998-09-21"
                  },
                  "baptism_date": {
                    "type": "string",
                    "format": "date",
                    "description": "The member's baptism date",
                    "example": "1999-12-11"
                  },
                  "church_cnpj": {
                    "type": "string",
                    "description": "The CNPJ of the church that member belongs to",
                    "example": "35878844000114"
                  },
                  "address_id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The address id",
                    "example": 1
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The user id",
                    "example": 1
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date",
                    "description": "The registration date of the member",
                    "example": "2020-09-03T23:50:59.676Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date",
                    "description": "The update date of the member",
                    "example": "2020-09-03T23:50:59.676Z"
                  },
                  "Address": {
                    "$ref": "#/definitions/Address"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/member/{cpf}": {
      "get": {
        "tags": ["Member"],
        "summary": "Search for a member by CPF",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "cpf",
            "description": "The member's CPF",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing member information will be returned.",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The church id",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "The member's name",
                  "example": "José Luis da Silva"
                },
                "cpf": {
                  "type": "string",
                  "description": "The member's CPF",
                  "example": "88811290007"
                },
                "genre": {
                  "type": "string",
                  "description": "The gender of the member",
                  "enum": ["Masculino", "Feminino"],
                  "example": "Masculino"
                },
                "age": {
                  "type": "integer",
                  "description": "The age of the member",
                  "example": "27"
                },
                "date_of_birth": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's birth date",
                  "example": "1986-08-11"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Member email",
                  "example": "jose_silva@hotmail.com"
                },
                "whatsapp": {
                  "type": "string",
                  "description": "The member's whatsapp",
                  "example": "79999999999"
                },
                "profession": {
                  "type": "string",
                  "description": "The member's profession",
                  "example": "Médico"
                },
                "conversion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's conversion date",
                  "example": "1998-09-21"
                },
                "baptism_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's baptism date",
                  "example": "1999-12-11"
                },
                "church_cnpj": {
                  "type": "string",
                  "description": "The CNPJ of the church that member belongs to",
                  "example": "35878844000114"
                },
                "address_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The address id",
                  "example": 1
                },
                "user_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The user id",
                  "example": 1
                },
                "createdAt": {
                  "type": "string",
                  "format": "date",
                  "description": "The registration date of the member",
                  "example": "2020-09-03T23:50:59.676Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date",
                  "description": "The update date of the member",
                  "example": "2020-09-03T23:50:59.676Z"
                },
                "Address": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the member and the church he belongs to don't exist.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "put": {
        "tags": ["Member"],
        "summary": "Updates a member and its address",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "cpf",
            "description": "The member's CPF",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "json",
            "description": "You need the following JSON format to update a member",
            "required": false,
            "schema": {
              "properties": {
                "member": {
                  "$ref": "#/definitions/Member"
                },
                "address": {
                  "$ref": "#/definitions/Address"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing member information will be returned.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          },
          "400": {
            "description": "Bad Request. It can happen if any field is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the member and the church he belongs to don't exist.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "delete": {
        "tags": ["Member"],
        "summary": "Deletes a member, his address and his user information if it exists",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "cpf",
            "description": "The member's CPF",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return a message stating that the member has been successfully deleted.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The member was successfully deleted!"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the member and the church he belongs to don't exist.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["User"],
        "summary": "Register a user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "json",
            "description": "You need the following fields in JSON to register a user",
            "required": true,
            "schema": {
              "properties": {
                "password": {
                  "type": "string",
                  "minLength": 8,
                  "maxLength": 16,
                  "format": "password",
                  "description": "The password of the church. ",
                  "example": "i56@JL#0"
                },
                "permission": {
                  "type": "string",
                  "description": "The permission of the user. The default value is admin.",
                  "example": "admin"
                },
                "cpf": {
                  "type": "string",
                  "description": "The member's CPF",
                  "example": "88811290007"
                }
              },
              "required": ["password"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully. A JSON object containing user information will be returned.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request. It can happen if some invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. It can happen if the member already has a user or if the member doesn't have an email",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "That member already has a registered user"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist or if the member that will have a user does not exist",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["User"],
        "summary": "Search for all users who have admin permisson",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON containing an array of all users will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The user id",
                    "example": 1
                  },
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30,
                    "description": "The username of the user.",
                    "example": "jose_silva"
                  },
                  "permission": {
                    "type": "string",
                    "description": "The permission of the user. The default value is admin",
                    "enum": ["super", "admin"],
                    "example": "admin"
                  },
                  "Member": {
                    "$ref": "#/definitions/Member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Search for a user by ID",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the user to be searched",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing user information will be returned.",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The user id",
                  "example": 1
                },
                "username": {
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 30,
                  "description": "The username of the user.",
                  "example": "jose_silva"
                },
                "permission": {
                  "type": "string",
                  "description": "The permission of the user. The default value is admin",
                  "enum": ["super", "admin"],
                  "example": "admin"
                },
                "Member": {
                  "$ref": "#/definitions/Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the user doesn't exist or if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Updates a user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the user to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "json",
            "description": "You need the following JSON format to update a user",
            "required": true,
            "schema": {
              "properties": {
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing updated user information will be returned.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the user doesn't exist or if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete a user",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the user to be deleted",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return a message stating that the user has been successfully deleted.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The user was successfully deleted!"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the user doesn't exist or if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members/baptized": {
      "get": {
        "tags": ["Search Filters"],
        "summary": "Search all members who are baptized",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. will return an array containing all members who are baptized",
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members/baptized/not": {
      "get": {
        "tags": ["Search Filters"],
        "summary": "Search all members who are not baptized",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. will return an array containing all members who are not baptized. Non-baptized members have the baptism_date field equal to null",
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/getMembersNotBaptized"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members/living/street": {
      "get": {
        "tags": ["Search Filters"],
        "summary": "Search all members who live at same street",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "street",
            "description": "The name of the street the members live on",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return an array containing all members who live at same street",
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/getMembersLivingInSamePlace"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist or if the street parameter of the query is empty",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members/living/neighborhood": {
      "get": {
        "tags": ["Search Filters"],
        "summary": "Search all members who live at same neighborhood",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "neighborhood",
            "description": "The name of the neighborhood the members live on",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return an array containing all members who live at same neighborhood",
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/getMembersLivingInSamePlace"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist or if the neigborhood parameter of the query is empty",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members/baptisms": {
      "get": {
        "tags": ["Search Filters"],
        "summary": "Search all baptisms occured at a determinate time interval",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "init",
            "description": "The initial date. Example: 1999-02-01",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end",
            "description": "The final date. Example: 2020-02-01",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return an array containing all the members that have been baptized in a period of time. The array will be ordered by the date of baptism",
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist or if the query's init and end parameters is empty",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members/conversions": {
      "get": {
        "tags": ["Search Filters"],
        "summary": "Search all conversions occured at a determinate time interval",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "init",
            "description": "The initial date. Example: 1999-02-01",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end",
            "description": "The final date. Example: 2020-02-01",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return an array containing all the members that have been converted in a period of time. The array will be ordered by the conversion date",
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist or if the query's init and end parameters is empty",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members/user": {
      "get": {
        "tags": ["Search Filters"],
        "summary": "Search all members who have a user",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return an array containing all the members that have a user",
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/getMembersWithUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members/profession": {
      "get": {
        "tags": ["Search Filters"],
        "summary": "Search all members who have a particular profession",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "church_name",
            "description": "The name of the church the member belongs to",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "profession",
            "description": "The profession to be searched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return an array containing all the members that have a particular profession. The array will be ordered by the profession",
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation.",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied!"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist or if the query profession parameter is empty",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This church doesn't exists"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "example": 1
        },
        "street": {
          "type": "string",
          "description": "The place where the church is located. Example: street, square, avenue...",
          "example": "Rua Laranjeiras"
        },
        "number": {
          "type": "string",
          "example": "1234"
        },
        "neighborhood": {
          "type": "string",
          "description": "The area where the church is located",
          "example": "Centro"
        },
        "zip_code": {
          "type": "string",
          "description": "The zip code of the area where the church is located.",
          "example": "49130000"
        },
        "complement": {
          "type": "string",
          "description": "Information that complements the church's location",
          "example": "Ao lado da rodoviária"
        },
        "city": {
          "type": "string",
          "description": "The city where the church is located",
          "example": "Riachuelo"
        },
        "state": {
          "type": "string",
          "description": "The state where the church is located",
          "example": "Sergipe"
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "The registration date of the address",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "The update date of the address",
          "example": "2020-09-03T23:50:59.676Z"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        },
        "username": {
          "type": "string",
          "minLength": 3,
          "maxLength": 30,
          "description": "The username of the user.",
          "example": "username_do_usuário"
        },
        "password": {
          "type": "string",
          "format": "password",
          "minLength": 8,
          "maxLength": 16,
          "description": "The encrypted password of the user. ",
          "example": "$2a$10$XrmCrBfRFCovYN/d.ubXq.Fth3T7c9hBLVPZm4ttEznLz1koyx24a"
        },
        "permission": {
          "type": "string",
          "description": "The permission of the user. The default value is admin",
          "enum": ["super", "admin"],
          "example": "permissão_do_usuário"
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "The registration date of the user",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "The update date of the user",
          "example": "2020-09-03T23:50:59.676Z"
        }
      }
    },
    "Church": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The church id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The name of the church",
          "example": "Igreja Batista do Brasil"
        },
        "cnpj": {
          "type": "string",
          "description": "The CNPJ of the church",
          "example": "14089839000152"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email of the church",
          "example": "ibabrasil@hotmail.com"
        },
        "creation_date": {
          "type": "string",
          "format": "date",
          "description": "The date of creation of the church",
          "example": "1986-08-11"
        },
        "address_id": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "example": 1
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "The registration date of the church",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "The update date of the church",
          "example": "2020-09-03T23:50:59.676Z"
        }
      }
    },
    "Member": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The church id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The member's name",
          "example": "José Luis da Silva"
        },
        "cpf": {
          "type": "string",
          "description": "The member's CPF",
          "example": "88811290007"
        },
        "genre": {
          "type": "string",
          "description": "The gender of the member",
          "enum": ["Masculino", "Feminino"],
          "example": "Masculino"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "The age of the member",
          "example": 27
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "description": "The member's birth date",
          "example": "1986-08-11"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Member email",
          "example": "jose.silva@hotmail.com"
        },
        "whatsapp": {
          "type": "string",
          "description": "The member's whatsapp",
          "example": "79999999999"
        },
        "profession": {
          "type": "string",
          "description": "The member's profession",
          "example": "Médico"
        },
        "conversion_date": {
          "type": "string",
          "format": "date",
          "description": "The member's conversion date",
          "example": "1998-09-21"
        },
        "baptism_date": {
          "type": "string",
          "format": "date",
          "description": "The member's baptism date",
          "example": "1999-12-11"
        },
        "church_cnpj": {
          "type": "string",
          "description": "The CNPJ of the church that member belongs to",
          "example": "35878844000114"
        },
        "address_id": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "example": 1
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "The registration date of the member",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "The update date of the member",
          "example": "2020-09-03T23:50:59.676Z"
        }
      }
    },
    "getMembersNotBaptized": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The church id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The member's name",
          "example": "José Luis da Silva"
        },
        "cpf": {
          "type": "string",
          "description": "The member's CPF",
          "example": "88811290007"
        },
        "genre": {
          "type": "string",
          "description": "The gender of the member",
          "enum": ["Masculino", "Feminino"],
          "example": "Masculino"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "The age of the member",
          "example": 27
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "description": "The member's birth date",
          "example": "1986-08-11"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Member email",
          "example": "jose.silva@hotmail.com"
        },
        "whatsapp": {
          "type": "string",
          "description": "The member's whatsapp",
          "example": "79999999999"
        },
        "profession": {
          "type": "string",
          "description": "The member's profession",
          "example": "Médico"
        },
        "conversion_date": {
          "type": "string",
          "format": "date",
          "description": "The member's conversion date",
          "example": "1998-09-21"
        },
        "baptism_date": {
          "type": "string",
          "format": "date",
          "description": "The member's baptism date",
          "example": null
        },
        "church_cnpj": {
          "type": "string",
          "description": "The CNPJ of the church that member belongs to",
          "example": "35878844000114"
        },
        "address_id": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "example": 1
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "The registration date of the member",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "The update date of the member",
          "example": "2020-09-03T23:50:59.676Z"
        }
      }
    },
    "getMembersLivingInSamePlace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The church id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The member's name",
          "example": "José Luis da Silva"
        },
        "cpf": {
          "type": "string",
          "description": "The member's CPF",
          "example": "88811290007"
        },
        "genre": {
          "type": "string",
          "description": "The gender of the member",
          "enum": ["Masculino", "Feminino"],
          "example": "Masculino"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "The age of the member",
          "example": 27
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "description": "The member's birth date",
          "example": "1986-08-11"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Member email",
          "example": "jose.silva@hotmail.com"
        },
        "whatsapp": {
          "type": "string",
          "description": "The member's whatsapp",
          "example": "79999999999"
        },
        "profession": {
          "type": "string",
          "description": "The member's profession",
          "example": "Médico"
        },
        "conversion_date": {
          "type": "string",
          "format": "date",
          "description": "The member's conversion date",
          "example": "1998-09-21"
        },
        "baptism_date": {
          "type": "string",
          "format": "date",
          "description": "The member's baptism date",
          "example": "1999-10-02"
        },
        "church_cnpj": {
          "type": "string",
          "description": "The CNPJ of the church that member belongs to",
          "example": "35878844000114"
        },
        "address_id": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "example": 1
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "The registration date of the member",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "The update date of the member",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "Address": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "getMembersWithUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The church id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The member's name",
          "example": "José Luis da Silva"
        },
        "cpf": {
          "type": "string",
          "description": "The member's CPF",
          "example": "88811290007"
        },
        "genre": {
          "type": "string",
          "description": "The gender of the member",
          "enum": ["Masculino", "Feminino"],
          "example": "Masculino"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "The age of the member",
          "example": 27
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "description": "The member's birth date",
          "example": "1986-08-11"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Member email",
          "example": "jose.silva@hotmail.com"
        },
        "whatsapp": {
          "type": "string",
          "description": "The member's whatsapp",
          "example": "79999999999"
        },
        "profession": {
          "type": "string",
          "description": "The member's profession",
          "example": "Médico"
        },
        "conversion_date": {
          "type": "string",
          "format": "date",
          "description": "The member's conversion date",
          "example": "1998-09-21"
        },
        "baptism_date": {
          "type": "string",
          "format": "date",
          "description": "The member's baptism date",
          "example": "1999-10-02"
        },
        "church_cnpj": {
          "type": "string",
          "description": "The CNPJ of the church that member belongs to",
          "example": "35878844000114"
        },
        "address_id": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "example": 1
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "The registration date of the member",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "The update date of the member",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "User": {
          "$ref": "#/definitions/userWithoutPassword"
        }
      }
    },
    "userWithoutPassword": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        },
        "username": {
          "type": "string",
          "minLength": 3,
          "maxLength": 30,
          "description": "The username of the user.",
          "example": "username_do_usuario"
        },
        "permission": {
          "type": "string",
          "description": "The permission of the user. The default value is admin",
          "enum": ["super", "admin"],
          "example": "permissao_do_usuario"
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "The registration date of the user",
          "example": "2020-09-03T23:50:59.676Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "The update date of the user",
          "example": "2020-09-03T23:50:59.676Z"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "description": "Enter a JWT Bearer token in the following format: \n **_Bearer token_** ",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
