{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Ekklesia API",
    "description": "Software gerenciador de Igrejas"
  },
  "host": "http://localhost:3333",
  "tags": [
    {
      "name": "Login",
      "description": "All about the Login module"
    },
    {
      "name": "Church",
      "description": "All about the Church module"
    },
    {
      "name": "Member",
      "description": "All about the Member module"
    },
    {
      "name": "User",
      "description": "All about the User module"
    },
    {
      "name": "Group",
      "description": "All about the Group module"
    },
    {
      "name": "Role",
      "description": "All about the Role module"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/login": {
      "post": {
        "tags": ["Login"],
        "summary": "Log in",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "login",
            "description": "The JSON format sent in the body to log in",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Member or church email",
                  "example": "jose_silva@hotmail.com"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "minLength": "8",
                  "maxLength": "16",
                  "description": "The member or church password. ",
                  "example": "js$45iG0"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. An object containing user information and the generated token will be returned."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the user doesn't exist"
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "delete": {
        "tags": ["Login"],
        "summary": "Logout",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "description": "Log out of the application. It is only necessary to pass the token in the header authorization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Successfully logged out."
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/church": {
      "post": {
        "tags": ["Church"],
        "summary": "Register a church",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "json",
            "description": "The JSON format sent in the body to register a church must be",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the church",
                  "example": "Igreja Batista do Brasil"
                },
                "cnpj": {
                  "type": "string",
                  "description": "The CNPJ of the church",
                  "example": "35878844000114"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "The email of the church",
                  "example": "ibabrasil@hotmail.com"
                },
                "creation_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The date of creation of the church",
                  "example": "1986-08-11"
                },
                "street": {
                  "type": "string",
                  "description": "The place where the church is located. Example: street, square, avenue...",
                  "example": "Rua Laranjeiras"
                },
                "number": {
                  "type": "string",
                  "example": "1234"
                },
                "neighborhood": {
                  "type": "string",
                  "description": "The area where the church is located",
                  "example": "Centro"
                },
                "zip_code": {
                  "type": "string",
                  "description": "The zip code of the area where the church is located.",
                  "example": "49130000"
                },
                "complement": {
                  "type": "string",
                  "description": "Information that complements the church's location",
                  "example": "Ao lado da rodovi√°ria"
                },
                "city": {
                  "type": "string",
                  "description": "The city where the church is located",
                  "example": "Riachuelo"
                },
                "state": {
                  "type": "string",
                  "description": "The state where the church is located",
                  "example": "Sergipe"
                },
                "username": {
                  "type": "string",
                  "minLength": "3",
                  "maxLength": "30",
                  "description": "The username of the church.",
                  "example": "iBaBrazil"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "minLength": "8",
                  "maxLength": "16",
                  "description": "The password of the church. ",
                  "example": "iB@B2020"
                }
              },
              "required": [
                "name",
                "cnpj",
                "email",
                "creation_date",
                "street",
                "number",
                "neighborhood",
                "zip_code",
                "city",
                "state",
                "username",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing church information will be returned."
          },
          "400": {
            "description": "Bad Request. It can happen if the CNPJ is invalid or if the church is already registered or if any other invalid request happens."
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/church/cnpj": {
      "get": {
        "tags": ["Church"],
        "summary": "Search a church by CNPJ",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cnpj",
            "description": "The CNPJ of the church to be searched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing church information including its address will be returned."
          },
          "400": {
            "description": "Bad Request. It can happen if the CNPJ is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. The church was not found"
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "put": {
        "tags": ["Church"],
        "summary": "Updates a church and its address",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cnpj",
            "description": "The CNPJ of the church to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "church",
            "description": "The church object sent in the body to update a church's data can take the following format",
            "required": false,
            "schema": {
              "name": "address",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the church",
                  "example": "Igreja Batista do Brasil"
                },
                "cnpj": {
                  "type": "string",
                  "description": "The CNPJ of the church",
                  "example": "35878844000114"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "The email of the church",
                  "example": "ibabrasil@hotmail.com"
                },
                "creation_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The date of creation of the church",
                  "example": "1986-08-11"
                }
              }
            }
          },
          {
            "in": "body",
            "name": "address",
            "description": "The address object sent in the body to update a church's address data can take the following format",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "description": "The place where the church is located. Example: street, square, avenue...",
                  "example": "Rua Laranjeiras"
                },
                "number": {
                  "type": "string",
                  "example": "1234"
                },
                "neighborhood": {
                  "type": "string",
                  "description": "The area where the church is located",
                  "example": "Centro"
                },
                "zip_code": {
                  "type": "string",
                  "description": "The zip code of the area where the church is located.",
                  "example": "49130000"
                },
                "complement": {
                  "type": "string",
                  "description": "Information that complements the church's location",
                  "example": "Ao lado da rodovi√°ria"
                },
                "city": {
                  "type": "string",
                  "description": "The city where the church is located",
                  "example": "Riachuelo"
                },
                "state": {
                  "type": "string",
                  "description": "The state where the church is located",
                  "example": "Sergipe"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing updated church information will be returned"
          },
          "400": {
            "description": "Bad Request. It can happen if the CNPJ is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. The church was not found"
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "delete": {
        "tags": ["Church"],
        "summary": "Delete a church and its address",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cnpj",
            "description": "The CNPJ of the church to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. The church was successfully deleted"
          },
          "400": {
            "description": "Bad Request. It can happen if the CNPJ is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. The church was not found"
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/member": {
      "post": {
        "tags": ["Member"],
        "summary": "Register a member",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "json",
            "description": "The JSON format sent in the body to register a member must be",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The member's name",
                  "example": "Jos√© Luis da Silva"
                },
                "cpf": {
                  "type": "string",
                  "description": "The member's CPF",
                  "example": "88811290007"
                },
                "genre": {
                  "type": "string",
                  "description": "The gender of the member",
                  "enum": ["Masculino", "Feminino"],
                  "example": "Masculino"
                },
                "date_of_birth": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's birth date",
                  "example": "1986-08-11"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Member email",
                  "example": "jose_silva@hotmail.com"
                },
                "whatsapp": {
                  "type": "string",
                  "description": "The member's whatsapp",
                  "example": "79999999999"
                },
                "profession": {
                  "type": "string",
                  "description": "The member's profession",
                  "example": "M√©dico"
                },
                "conversion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's conversion date",
                  "example": "1998-09-21"
                },
                "baptism_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's baptism date",
                  "example": "1999-12-11"
                },
                "street": {
                  "type": "string",
                  "description": "The place where the member lives. Example: street, square, avenue...",
                  "example": "Rua Laranjeiras"
                },
                "number": {
                  "type": "string",
                  "example": "1234"
                },
                "neighborhood": {
                  "type": "string",
                  "description": "The area where the member lives",
                  "example": "Centro"
                },
                "zip_code": {
                  "type": "string",
                  "description": "The zip code of the area where the member lives",
                  "example": "49130000"
                },
                "complement": {
                  "type": "string",
                  "description": "Information that complements the member's address",
                  "example": "Ao lado da rodovi√°ria"
                },
                "city": {
                  "type": "string",
                  "description": "The city where the member lives",
                  "example": "Riachuelo"
                },
                "state": {
                  "type": "string",
                  "description": "The state where the member lives",
                  "example": "Sergipe"
                },
                "church_name": {
                  "type": "string",
                  "description": "It is necessary to send in the body the name of the church that the member belongs to",
                  "example": "Igreja Batista do Brasil"
                }
              },
              "required": [
                "name",
                "cpf",
                "genre",
                "date_of_birth",
                "email",
                "profession",
                "street",
                "number",
                "neighborhood",
                "zip_code",
                "city",
                "state",
                "church_name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing member information will be returned."
          },
          "400": {
            "description": "Bad Request. It can happen if any field is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist"
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/members": {
      "get": {
        "tags": ["Member"],
        "summary": "Search for all members",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The number of page. Each page will return 10 items from the array",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "json",
            "description": "It is necessary to send in the body the name of the church that the member belongs to",
            "required": true,
            "schema": {
              "properties": {
                "church_name": {
                  "type": "string",
                  "description": "The name of the church the member belongs to",
                  "example": "Igreja Batista do Brasil"
                }
              },
              "required": ["church_name"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON containing an array of all members will be returned."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the church the member belongs to doesn't exist"
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "/member/cpf": {
      "get": {
        "tags": ["Member"],
        "summary": "Search for a member by ID",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cpf",
            "description": "The member's CPF",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "json",
            "description": "It is necessary to send in the body the name of the church that the member belongs to",
            "required": true,
            "schema": {
              "properties": {
                "church_name": {
                  "type": "string",
                  "description": "The name of the church the member belongs to",
                  "example": "Igreja Batista do Brasil"
                }
              },
              "required": ["church_name"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing member information will be returned."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the member and the church he belongs to don't exist."
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "put": {
        "tags": ["Member"],
        "summary": "Updates a member and its address",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cpf",
            "description": "The member's CPF",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "member",
            "description": "The member object sent in the body to update a member's data can take the following format",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The member's name",
                  "example": "Jos√© Luis da Silva"
                },
                "cpf": {
                  "type": "string",
                  "description": "The member's CPF",
                  "example": "88811290007"
                },
                "genre": {
                  "type": "string",
                  "description": "The gender of the member",
                  "enum": ["Masculino", "Feminino"],
                  "example": "Masculino"
                },
                "date_of_birth": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's birth date",
                  "example": "1986-08-11"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Member email",
                  "example": "jose_silva@hotmail.com"
                },
                "whatsapp": {
                  "type": "string",
                  "description": "The member's whatsapp",
                  "example": "79999999999"
                },
                "profession": {
                  "type": "string",
                  "description": "The member's profession",
                  "example": "M√©dico"
                },
                "conversion_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's conversion date",
                  "example": "1998-09-21"
                },
                "baptism_date": {
                  "type": "string",
                  "format": "date",
                  "description": "The member's baptism date",
                  "example": "1999-12-11"
                },
                "church_name": {
                  "type": "string",
                  "description": "The name of the church the member belongs to",
                  "example": "Igreja Batista do Brasil"
                }
              },
              "required": ["church_name"]
            }
          },
          {
            "in": "body",
            "name": "address",
            "description": "The address object sent in the body to update a member's address data can take the following format",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "description": "The place where the church is located. Example: street, square, avenue...",
                  "example": "Rua Laranjeiras"
                },
                "number": {
                  "type": "string",
                  "example": "1234"
                },
                "neighborhood": {
                  "type": "string",
                  "description": "The area where the church is located",
                  "example": "Centro"
                },
                "zip_code": {
                  "type": "string",
                  "description": "The zip code of the area where the church is located.",
                  "example": "49130000"
                },
                "complement": {
                  "type": "string",
                  "description": "Information that complements the church's location",
                  "example": "Ao lado da rodovi√°ria"
                },
                "city": {
                  "type": "string",
                  "description": "The city where the church is located",
                  "example": "Riachuelo"
                },
                "state": {
                  "type": "string",
                  "description": "The state where the church is located",
                  "example": "Sergipe"
                }
              }
            }
          },
          {
            "in": "body",
            "description": "It is necessary to send in the body the name of the church that the member belongs to",
            "required": true,
            "schema": {
              "properties": {
                "church_name": {
                  "type": "string",
                  "description": "The name of the church the member belongs to",
                  "example": "Igreja Batista do Brasil"
                }
              },
              "required": ["church_name"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing member information will be returned.."
          },
          "400": {
            "description": "Bad Request. It can happen if any field is invalid or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the member and the church he belongs to don't exist."
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      },
      "delete": {
        "tags": ["Member"],
        "summary": "Deletes a member, his address and his user information if it exists",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cpf",
            "description": "The member's CPF",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "json",
            "description": "It is necessary to send in the body the name of the church that the member belongs to",
            "required": true,
            "schema": {
              "properties": {
                "church_name": {
                  "type": "string",
                  "description": "The name of the church the member belongs to",
                  "example": "Igreja Batista do Brasil"
                }
              },
              "required": ["church_name"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Will return a message stating that the member has been successfully deleted."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the member and the church he belongs to don't exist."
          },
          "500": {
            "description": "Internal Server Error. It can happen if there is an error on the server when processing the request"
          }
        }
      }
    },
    "user": {
      "post": {
        "tags": ["User"],
        "summary": "Register a user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "json",
            "description": "The JSON format sent in the body to register a user must be:",
            "required": true,
            "schema": {
              "properties": {
                "username": {
                  "type": "string",
                  "minLength": "3",
                  "maxLength": "30",
                  "description": "The username of the church.",
                  "example": "joao_carlos"
                },
                "password": {
                  "type": "string",
                  "minLength": "8",
                  "maxLength": "16",
                  "format": "password",
                  "description": "The password of the church. ",
                  "example": "i56@JL#0"
                },
                "permission": {
                  "type": "string",
                  "enum": ["admin", "comum"],
                  "description": "The permission of the user. The default value is comum.",
                  "example": "admin"
                }
              },
              "required": ["username", "password"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing user information will be returned."
          },
          "400": {
            "description": "Bad Request. It can happen if the username already exists or if any other invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          }
        }
      },
      "get": {
        "tags": ["User"],
        "summary": "Search for all users who have admin or comum permisson",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON containing an array of all users will be returned."
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          }
        }
      }
    },
    "user/id": {
      "get": {
        "tags": ["User"],
        "summary": "Search for a user by ID",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ID",
            "description": "The ID of the user to be searched",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing user information will be returned."
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the user doesn't exist"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Updates a user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ID",
            "description": "The ID of the user to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "json",
            "description": "The JSON format sent in the body to update a user must be:",
            "required": true,
            "schema": {
              "properties": {
                "permission": {
                  "type": "string",
                  "enum": ["super", "admin", "comum"],
                  "description": "The permission of the user. The default value is comum",
                  "example": "admin"
                }
              },
              "required": ["permission"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. A JSON object containing updated user information will be returned."
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the user doesn't exist"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete a user",
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ID",
            "description": "The ID of the user to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. The user was successfully deleted!."
          },
          "400": {
            "description": "Bad Request. It can happen if an invalid request happens."
          },
          "401": {
            "description": "Unauthorized. It can happen if the token has not been provided or if the token is invalid or if the user is not authorized to perform a particular operation."
          },
          "404": {
            "description": "Not Found. It can happen if the user doesn't exist"
          }
        }
      }
    },
    "/group": {
      "post": {
        "tags": ["Group"],
        "summary": "Cadastra os grupos",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/role": {
      "post": {
        "tags": ["Role"],
        "summary": "Cadastra os cargos",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "required": [
        "street",
        "number",
        "neighborhood",
        "zip_code",
        "city",
        "state"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "example": 1
        },
        "street": {
          "type": "string",
          "description": "The place where the church is located. Example: street, square, avenue...",
          "example": "Rua Laranjeiras"
        },
        "number": {
          "type": "string",
          "example": "1234"
        },
        "neighborhood": {
          "type": "string",
          "description": "The area where the church is located",
          "example": "Centro"
        },
        "zip_code": {
          "type": "string",
          "description": "The zip code of the area where the church is located.",
          "example": "49130000"
        },
        "complement": {
          "type": "string",
          "description": "Information that complements the church's location",
          "example": "Ao lado da rodovi√°ria"
        },
        "city": {
          "type": "string",
          "description": "The city where the church is located",
          "example": "Riachuelo"
        },
        "state": {
          "type": "string",
          "description": "The state where the church is located",
          "example": "Sergipe"
        }
      }
    },
    "User": {
      "type": "object",
      "required": ["username", "password", "permission"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        },
        "username": {
          "type": "string",
          "minLength": "3",
          "maxLength": "30",
          "description": "The username of the church.",
          "example": "iBaBrazil"
        },
        "password": {
          "type": "string",
          "format": "password",
          "minLength": "8",
          "maxLength": "16",
          "description": "The password of the church. ",
          "example": "iB@B2020"
        },
        "permission": {
          "type": "string",
          "description": "The permission of the user. The default value is comum",
          "enum": ["super", "admin", "comum"],
          "example": "super"
        }
      }
    },
    "Church": {
      "type": "object",
      "required": [
        "cnpj",
        "name",
        "email",
        "creation_date",
        "address_id",
        "user_id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The church id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The name of the church",
          "example": "Igreja Batista do Brasil"
        },
        "cnpj": {
          "type": "string",
          "description": "The CNPJ of the church",
          "example": "35878844000114"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email of the church",
          "example": "ibabrasil@hotmail.com"
        },
        "creation_date": {
          "type": "string",
          "format": "date",
          "description": "The date of creation of the church",
          "example": "1986-08-11"
        },
        "address_id": {
          "type": "integer",
          "format": "int32",
          "description": "The address id",
          "example": 1
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "The user id",
          "example": 1
        }
      }
    },
    "Member": {
      "type": "object",
      "required": [
        "name",
        "cpf",
        "genre",
        "date_of_birth",
        "email",
        "profession",
        "street",
        "number",
        "neighborhood",
        "zip_code",
        "city",
        "state"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The church id",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The member's name",
          "example": "Jos√© Luis da Silva"
        },
        "cpf": {
          "type": "string",
          "description": "The member's CPF",
          "example": "88811290007"
        },
        "genre": {
          "type": "string",
          "description": "The gender of the member",
          "enum": ["Masculino", "Feminino"],
          "example": "Masculino"
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "description": "The member's birth date",
          "example": "1986-08-11"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Member email",
          "example": "jose_silva@hotmail.com"
        },
        "whatsapp": {
          "type": "string",
          "description": "The member's whatsapp",
          "example": "79999999999"
        },
        "profession": {
          "type": "string",
          "description": "The member's profession",
          "example": "M√©dico"
        },
        "conversion_date": {
          "type": "string",
          "format": "date",
          "description": "The member's conversion date",
          "example": "1998-09-21"
        },
        "baptism_date": {
          "type": "string",
          "format": "date",
          "description": "The member's baptism date",
          "example": "1999-12-11"
        },
        "street": {
          "type": "string",
          "description": "The place where the member lives. Example: street, square, avenue...",
          "example": "Rua Laranjeiras"
        },
        "number": {
          "type": "string",
          "example": "1234"
        },
        "neighborhood": {
          "type": "string",
          "description": "The area where the member lives",
          "example": "Centro"
        },
        "zip_code": {
          "type": "string",
          "description": "The zip code of the area where the member lives",
          "example": "49130000"
        },
        "complement": {
          "type": "string",
          "description": "Information that complements the member's address",
          "example": "Ao lado da rodovi√°ria"
        },
        "city": {
          "type": "string",
          "description": "The city where the member lives",
          "example": "Riachuelo"
        },
        "state": {
          "type": "string",
          "description": "The state where the member lives",
          "example": "Sergipe"
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "Enter JWT Bearer token **_only_**",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
